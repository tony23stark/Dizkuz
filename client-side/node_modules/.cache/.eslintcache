[{"C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\index.js":"1","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\App.js":"2","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\reportWebVitals.js":"3","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\Redirect.js":"4","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Pages\\LandingPage\\LandingPage.js":"5","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Pages\\LoginPage\\LoginPage.js":"6","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Pages\\HomePage\\HomePage.js":"7","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Pages\\SignupPage\\SignupPage.js":"8","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Pages\\OrganisationsPage\\OrganisationsPage.js":"9","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Pages\\IssuePage\\IssuePage.js":"10","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Pages\\NewOrganisationPage\\NewOrganisationPage.js":"11","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Pages\\MembersPage\\MembersPage.js":"12","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Pages\\ChatPage\\ChatPage.js":"13","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Pages\\CategoryPage\\CategoryPage.js":"14","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Pages\\AboutUsPage\\AboutUsPage.js":"15","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\NavBar.js":"16","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\Footer.js":"17","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\IssueCard.js":"18","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\ImageContainer.js":"19","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\OrganisationCard.js":"20","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\MessageInput.js":"21","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\CategoryCard.js":"22","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\MemberCard.js":"23","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\MessageCardOther.js":"24","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\MessageCardUser.js":"25","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\DizkuzText.js":"26","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\Creaters.js":"27","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\UserCard.js":"28"},{"size":382,"mtime":1728220417381,"results":"29","hashOfConfig":"30"},{"size":2155,"mtime":1728220417290,"results":"31","hashOfConfig":"30"},{"size":484,"mtime":1728220417447,"results":"32","hashOfConfig":"30"},{"size":879,"mtime":1728220417922,"results":"33","hashOfConfig":"30"},{"size":2107,"mtime":1728220418469,"results":"34","hashOfConfig":"30"},{"size":8368,"mtime":1728220418578,"results":"35","hashOfConfig":"30"},{"size":5879,"mtime":1735330245893,"results":"36","hashOfConfig":"30"},{"size":10972,"mtime":1728220418866,"results":"37","hashOfConfig":"30"},{"size":6972,"mtime":1728220418765,"results":"38","hashOfConfig":"30"},{"size":14877,"mtime":1728220418406,"results":"39","hashOfConfig":"30"},{"size":14624,"mtime":1728220418704,"results":"40","hashOfConfig":"30"},{"size":6716,"mtime":1728220418638,"results":"41","hashOfConfig":"30"},{"size":8609,"mtime":1728220418239,"results":"42","hashOfConfig":"30"},{"size":14418,"mtime":1728220418180,"results":"43","hashOfConfig":"30"},{"size":387,"mtime":1728220418117,"results":"44","hashOfConfig":"30"},{"size":2682,"mtime":1728220417862,"results":"45","hashOfConfig":"30"},{"size":712,"mtime":1735242780736,"results":"46","hashOfConfig":"30"},{"size":1589,"mtime":1728220417699,"results":"47","hashOfConfig":"30"},{"size":1212,"mtime":1728220417670,"results":"48","hashOfConfig":"30"},{"size":4793,"mtime":1728220417892,"results":"49","hashOfConfig":"30"},{"size":3088,"mtime":1728220417825,"results":"50","hashOfConfig":"30"},{"size":1057,"mtime":1728220417536,"results":"51","hashOfConfig":"30"},{"size":329,"mtime":1728220417725,"results":"52","hashOfConfig":"30"},{"size":528,"mtime":1728220417749,"results":"53","hashOfConfig":"30"},{"size":523,"mtime":1728220417789,"results":"54","hashOfConfig":"30"},{"size":625,"mtime":1728220417614,"results":"55","hashOfConfig":"30"},{"size":797,"mtime":1735243273376,"results":"56","hashOfConfig":"30"},{"size":869,"mtime":1728220417956,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"iy08hn",{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155"},"C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\index.js",[],[],"C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\App.js",["156"],[],"import React from \"react\";\nimport \"./App.css\";\nimport LandingPage from \"./Pages/LandingPage/LandingPage\";\nimport LoginPage from \"./Pages/LoginPage/LoginPage\";\nimport SignupPage from \"./Pages/SignupPage/SignupPage\";\nimport HomePage from \"./Pages/HomePage/HomePage\";\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\nimport OrganisationsPage from \"./Pages/OrganisationsPage/OrganisationsPage\";\nimport CategoryPage from \"./Pages/CategoryPage/CategoryPage\";\nimport IssuePage from \"./Pages/IssuePage/IssuePage\";\nimport ChatPage from \"./Pages/ChatPage/ChatPage\";\nimport NewOrganisationPage from \"./Pages/NewOrganisationPage/NewOrganisationPage\";\nimport Redirect from \"./Components/Redirect\";\nimport MembersPage from \"./Pages/MembersPage/MembersPage\";\nimport AboutUsPage from \"./Pages/AboutUsPage/AboutUsPage\";\n\nfunction App() {\n     return (\n          <Router>\n               <div className=\"App\">\n                    <Routes>\n                         <Route path=\"/\" element={<HomePage />} />\n                         <Route\n                              path=\"/organisations\"\n                              element={<OrganisationsPage />}\n                         />\n                         <Route path=\"/categories\" element={<CategoryPage />} />\n                         <Route path=\"/chats\" element={<ChatPage />} />\n                         <Route path=\"/issues\" element={<IssuePage />} />\n                         <Route\n                              path=\"/neworganisation\"\n                              element={<NewOrganisationPage />}\n                         />\n                         <Route path=\"/members\" element={<MembersPage />} />\n                         <Route path=\"/aboutus\" element={<AboutUsPage />} />\n                         <Route path=\"/landing\" element={<LandingPage />} />\n                         <Route path=\"/login\" element={<LoginPage />} />\n                         <Route path=\"/signup\" element={<SignupPage />} />\n                         <Route path=\"/redirect\" element={<Redirect />} />\n                    </Routes>\n               </div>\n          </Router>\n     );\n}\n\nexport default App;\n","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\reportWebVitals.js",[],[],"C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\Redirect.js",["157","158","159"],[],"import React, { useEffect } from \"react\";\nimport { json, useNavigate } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport NavBar from \"./NavBar\";\nimport Footer from \"./Footer\";\n\nfunction App() {\n     const navigate = useNavigate();\n\n     useEffect(() => {\n          const redirectURL = JSON.parse(\n               localStorage.getItem(\"dizkuzredirectURL\")\n          );\n          navigate(redirectURL);\n     }, []);\n\n     return (\n          <>\n               <NavBar />\n               <h1\n                    style={{\n                         height: \"70vh\",\n                         display: \"flex\",\n                         justifyContent: \"center\",\n                         alignItems: \"center\",\n                    }}\n               >\n                    Redirecting...\n               </h1>\n               <Footer />\n          </>\n     );\n}\n\nexport default App;\n","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Pages\\LandingPage\\LandingPage.js",["160"],[],"import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Landing_img from \"./Landing_img.jpg\";\nimport Button from \"react-bootstrap/Button\";\nimport \"./LandingPage.css\";\n\nexport default function LandingPage() {\n     const navigate = useNavigate();\n     const jumptoLogin = () => {\n          navigate(\"/login\");\n     };\n\n     const jumptoSignup = () => {\n          navigate(\"/signup\");\n     };\n\n     const [currentUser, setCurrentUser] = useState({\n          name: null,\n          email: null,\n          password: null,\n          organisations: [],\n          messages: 0,\n     });\n\n     useEffect(() => {\n          const currentUser_ = JSON.parse(localStorage.getItem(\"currentUser\"));\n          setCurrentUser(currentUser_);\n          if (currentUser.name == null) {\n               navigate(\"/landing\");\n          }\n     }, []);\n\n     return (\n          <>\n               <div className=\"LandingContainer\">\n                    <div className=\"LandingPageContainer\">\n                         <div className=\"LandingPageChild1\">\n                              <img src={Landing_img} alt=\"img\" />\n                         </div>\n                         <div className=\"LandingPageChild2\">\n                              <h1>\n                                   Welcome to <b>Dizkuz</b>\n                              </h1>\n                              <Button\n                                   className=\"button\"\n                                   variant=\"primary\"\n                                   onClick={jumptoLogin}\n                              >\n                                   Login\n                              </Button>\n                              <Button\n                                   className=\"button\"\n                                   variant=\"primary\"\n                                   onClick={jumptoSignup}\n                              >\n                                   Sign up\n                              </Button>{\" \"}\n                         </div>\n                    </div>\n               </div>\n          </>\n     );\n}\n","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Pages\\LoginPage\\LoginPage.js",["161","162","163","164","165","166","167"],[],"import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Login_img from \"./Landing_img.jpg\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport \"./LoginPage.css\";\nimport Alert from \"react-bootstrap/Alert\";\n\nexport default function LoginPage(prop) {\n     const [alertHead, setAlertHead] = useState(\"\");\n     const [alertBody, setAlertBody] = useState(\"\");\n     const [show, setShow] = useState(false);\n\n     let currentUser_ = {};\n\n     const [userCredentials, setUserCredentials] = useState({\n          email: \"\",\n          password: \"\",\n     });\n     const navigate = useNavigate();\n\n     const CheckLogin = () => {\n          prop.setUser(true);\n          navigate(\"/\");\n     };\n\n     const handleInputs = (e) => {\n          const Name = e.target.name;\n          const Value = e.target.value;\n          setUserCredentials({ ...userCredentials, [Name]: Value });\n     };\n\n     const handleSubmit = async (e) => {\n          e.preventDefault();\n          try {\n               const response = await fetch(\"https://dizkuz-server.onrender.com/login\", {\n                    method: \"POST\",\n                    body: JSON.stringify(userCredentials),\n                    headers: {\n                         \"Content-Type\": \"application/json\",\n                    },\n               });\n               const data = await response.json();\n               if (data.status == \"notFound\") {\n                    setAlertHead(\"User not found!\");\n                    setAlertBody(\n                         \"The email you used to login is not present in our database. Please try to recall your email and try again.\"\n                    );\n                    setShow(true);\n               } else {\n                    const check = data.password;\n                    if (data.status === \"matched\") {\n                         const curUser = {\n                              name: data.name,\n                              email: data.email,\n                              password: data.password,\n                              organisations: data.organisations,\n                              messages: data.messages,\n                              _id: data._id,\n                              __v: data.__v,\n                         };\n                         localStorage.setItem(\n                              \"currentUser\",\n                              JSON.stringify(curUser)\n                         );\n                         navigate(\"/\");\n                    } else {\n                         setAlertHead(\"Incorrect password!\");\n                         setAlertBody(\n                              \"The password you entered is not the correct password for the account \" +\n                                   userCredentials.email +\n                                   \". Please recall your password and try again.\"\n                         );\n                         setShow(true);\n                    }\n               }\n          } catch (error) {\n               setAlertHead(\"Login failed!\");\n               setAlertBody(\n                    \"Due to an unexpected error we were not able to log you in, please check your connection try again.\"\n               );\n               setShow(true);\n          }\n     };\n\n     useEffect(() => {\n          const currentUser_ = JSON.parse(localStorage.getItem(\"currentUser\"));\n          if (currentUser_ != null) {\n               navigate(\"/\");\n          }\n     }, []);\n\n     return show ? (\n          <>\n               <Alert\n                    variant=\"danger\"\n                    onClose={() => setShow(false)}\n                    dismissible\n               >\n                    <Alert.Heading>{alertHead}</Alert.Heading>\n                    <p>{alertBody}</p>\n               </Alert>\n               <div className=\"LoginContainer\">\n                    <div className=\"LoginPageContainer\">\n                         <div className=\"LoginPageChild1\">\n                              <img src={Login_img} alt=\"img\" />\n                         </div>\n                         <div className=\"LoginPageChild2\">\n                              <Form onSubmit={handleSubmit}>\n                                   <Form.Group\n                                        className=\"mb-3\"\n                                        controlId=\"formBasicEmail\"\n                                   >\n                                        <Form.Label>Email address</Form.Label>\n                                        <Form.Control\n                                             type=\"email\"\n                                             name=\"email\"\n                                             placeholder=\"Enter email\"\n                                             required\n                                             onChange={handleInputs}\n                                        />\n                                   </Form.Group>\n                                   <Form.Group\n                                        className=\"mb-3\"\n                                        controlId=\"formBasicPassword\"\n                                   >\n                                        <Form.Label>Password</Form.Label>\n                                        <Form.Control\n                                             type=\"password\"\n                                             name=\"password\"\n                                             placeholder=\"Password\"\n                                             required\n                                             onChange={handleInputs}\n                                        />\n                                   </Form.Group>\n                                   <Button variant=\"primary\" type=\"submit\">\n                                        Login\n                                   </Button>\n                              </Form>\n                              <a onClick={ () => { navigate(\"/signup\")}}>Sign up instead?</a>\n                         </div>\n                    </div>\n               </div>\n          </>\n     ) : (\n          <>\n               <div className=\"LoginContainer\">\n                    <div className=\"LoginPageContainer\">\n                         <div className=\"LoginPageChild1\">\n                              <img src={Login_img} alt=\"img\" />\n                         </div>\n                         <div className=\"LoginPageChild2\">\n                              <Form onSubmit={handleSubmit}>\n                                   <Form.Group\n                                        className=\"mb-3\"\n                                        controlId=\"formBasicEmail\"\n                                   >\n                                        <Form.Label>Email address</Form.Label>\n                                        <Form.Control\n                                             type=\"email\"\n                                             name=\"email\"\n                                             placeholder=\"Enter email\"\n                                             required\n                                             onChange={handleInputs}\n                                        />\n                                   </Form.Group>\n                                   <Form.Group\n                                        className=\"mb-3\"\n                                        controlId=\"formBasicPassword\"\n                                   >\n                                        <Form.Label>Password</Form.Label>\n                                        <Form.Control\n                                             type=\"password\"\n                                             name=\"password\"\n                                             placeholder=\"Password\"\n                                             required\n                                             onChange={handleInputs}\n                                        />\n                                   </Form.Group>\n\n                                   <Button variant=\"primary\" type=\"submit\">\n                                        Login\n                                   </Button>\n                              </Form>\n                              <a onClick={ () => { navigate(\"/signup\")}}>Sign up instead?</a>\n                         </div>\n                    </div>\n               </div>\n          </>\n     );\n}\n","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Pages\\HomePage\\HomePage.js",["168","169"],[],"import React, { useEffect, useState } from \"react\";\nimport \"./HomePage.css\";\nimport Footer from \"../../Components/Footer\";\nimport { useNavigate } from \"react-router-dom\";\nimport NavBar from \"../../Components/NavBar\";\nimport ImageContainer from \"../../Components/ImageContainer\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nexport default function HomePage(prop) {\n     const [HtmlLoaded, setHtmlLoaded] = useState(false);\n\n     const navigate = useNavigate();\n     const jumptoOrganisations = () => {\n          navigate(\"/organisations\");\n     };\n\n     const JumpToNewOrganisation = () => {\n          navigate(\"/neworganisation\");\n     };\n\n     const jumptoAboutus = () => {\n          navigate(\"/aboutus\");\n     };\n\n     const [currentUser, setCurrentUser] = useState({\n          name: \"\",\n          email: \"\",\n          organisations: [],\n          messages: 0,\n     });\n\n     let currentUser_ = {};\n     let profilePic = null;\n\n     useEffect(() => {\n          const doWork = async () => {\n               currentUser_ = JSON.parse(localStorage.getItem(\"currentUser\"));\n               if (currentUser_ == null) {\n                    navigate(\"/landing\");\n               }\n               setCurrentUser({\n                    name: currentUser_.name,\n                    emaill: currentUser_.email,\n                    organisations: currentUser_.organisations,\n                    messages: currentUser_.messages,\n                    _id: currentUser_._id,\n               });\n               profilePic = currentUser_.profilePic;\n               setHtmlLoaded(true);\n          };\n          doWork();\n     }, []);\n\n     return HtmlLoaded ? (\n          <>\n               <NavBar />\n               <div className=\"HomePageOuterContainer\">\n                    <div className=\"HomePageUserInfo\">\n                         <div className=\"HomePageProfileContainer\">\n                              <div>\n                                   <div className=\"title_he\">\n                                        <i>User name :</i>\n                                   </div>{\" \"}\n                                   <h2>{currentUser.name}</h2>\n                              </div>\n                              <div>\n                                   <div className=\"title_he\">\n                                        <i>User ID :</i>\n                                   </div>{\" \"}\n                                   <h4 style={{ color: \"rgb( 0, 89, 89)\" }}>\n                                        {currentUser._id}\n                                   </h4>\n                              </div>\n                              <div>\n                                   <div className=\"title_he\">\n                                        <i>Email :</i>\n                                   </div>{\" \"}\n                                   <h4 style={{ color: \"rgb( 0, 89, 89)\" }}>\n                                        {currentUser.emaill}\n                                   </h4>\n                              </div>\n                              <div>\n                                   <div className=\"title_he\">\n                                        <i>Organisations :</i>\n                                   </div>{\" \"}\n                                   <h4 style={{ color: \"rgb( 0, 89, 89)\" }}>\n                                        {currentUser.organisations.length}\n                                   </h4>\n                              </div>\n                         </div>\n                         <ImageContainer image={profilePic} />\n                    </div>\n                    <hr />\n                    <div className=\"HomePageButtons\">\n                         <div className=\"HBtn\" onClick={jumptoOrganisations}>\n                              Go to your Organisations\n                         </div>\n                         <div className=\"HBtn\" onClick={JumpToNewOrganisation}>\n                              Create a new Organisation\n                         </div>\n                    </div>\n                    <hr />\n                    <div className=\"appInfo\">\n                         <p>\n                              <b>Dizkuz</b> is a website that allows users in an\n                              organisation to collaborate and discuss seamlessly\n                              on various categories of topics in real time. This\n                              app allows several organisations to have their\n                              users discuss their issues classified on the basis\n                              of categories. Every user can be a member of\n                              various organisations. Every organisation contains\n                              several categories and inside those categories are\n                              listed issues which individuals face and have\n                              posted on the site. Every other user in the same\n                              organisation can check the issue and discuss about\n                              the possible solutions to it. It works on real\n                              time chat system which can help reduce the wasted\n                              of time in searching solution to a problem which\n                              is already known by other.\n                         </p>\n                    </div>\n                    <hr />\n                    <div className=\"abt\">\n                         <div className=\"HBtn small\" onClick={jumptoAboutus}>\n                              Learn more about us\n                         </div>\n                    </div>\n               </div>\n               <Footer />\n          </>\n     ) : (\n          <>\n               <NavBar />\n               <div className=\"SpinnerContainer\">\n                    <Spinner animation=\"border\" variant=\"dark\" />\n               </div>\n               <Footer />\n          </>\n     );\n}\n","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Pages\\SignupPage\\SignupPage.js",["170","171","172"],[],"import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Signup_img from \"./Landing_img.jpg\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport \"./SignupPage.css\";\nimport Alert from \"react-bootstrap/Alert\";\n\nexport default function SignupPage( prop) {\n     const navigate = useNavigate();\n     const [alertHead, setAlertHead] = useState(\"\");\n     const [alertBody, setAlertBody] = useState(\"\");\n     const [alertVarient, setAlertVarient] = useState(\"\");\n     const [show, setShow] = useState(false);\n\n     const [person, setPerson] = useState({\n          name: \"\",\n          email: \"\",\n          password: \"\",\n          cPassword: \"\",\n     });\n\n     const handleInputs = (e) => {\n          const Name = e.target.name;\n          const Value = e.target.value;\n          setPerson({ ...person, [Name]: Value });\n     };\n\n     const handleSubmit = async (e) => {\n          e.preventDefault();\n          if (person.password === person.cPassword) {\n               try {\n                    const response = await fetch(\n                         \"https://dizkuz-server.onrender.com/signUp\",\n                         {\n                              method: \"POST\",\n                              body: JSON.stringify(person),\n                              headers: {\n                                   \"Content-Type\": \"application/json\",\n                              },\n                         }\n                    );\n                    const data = await response.json();\n                    if (data != null) {\n                         const curUser = {\n                              name: data.name,\n                              email: data.email,\n                              password: data.password,\n                              organisations: data.organisations,\n                              messages: data.messages,\n                              _id: data._id,\n                              __v: data.__v,\n                         };\n                         localStorage.setItem(\n                              \"currentUser\",\n                              JSON.stringify(curUser)\n                         );\n                         navigate(\"/\");\n                    } else {\n                         setAlertHead(\"Signing up failed!\");\n                         setAlertBody(\n                              \"The email you used to sign up is already in use, try logging in or sign up with a different email.\"\n                         );\n                         setAlertVarient(\"danger\");\n                         setShow(true);\n                    }\n               } catch (error) {\n                    setAlertHead(\"Signing up failed!\");\n                    setAlertBody(\n                         \"Due to an unexpected error we were not able to sign you up, please check your connection try again.\"\n                    );\n                    setAlertVarient(\"danger\");\n                    setShow(true);\n               }\n          } else {\n               setAlertHead(\"Oops! Password mismatched...\");\n               setAlertBody(\n                    \"The passwords you entered didn't matched. Please check the password and try again.\"\n               );\n               setAlertVarient(\"warning\");\n               setShow(true);\n          }\n     };\n\n     useEffect(() => {\n          const currentUser_ = JSON.parse(localStorage.getItem(\"currentUser\"));\n\n          if (currentUser_ != null) {\n               navigate(\"/\");\n          }\n     }, []);\n\n     return show ? (\n          <>\n               <Alert\n                    variant={alertVarient}\n                    onClose={() => setShow(false)}\n                    dismissible\n               >\n                    <Alert.Heading>{alertHead}</Alert.Heading>\n                    <p>{alertBody}</p>\n               </Alert>\n               <div className=\"SignupContainer\">\n                    <div className=\"SignupPageContainer\">\n                         <div className=\"SignupPageChild1\">\n                              <img src={Signup_img} alt=\"img\" />\n                         </div>\n                         <div className=\"SignupPageChild2\">\n                              <Form onSubmit={handleSubmit}>\n                                   <Form.Group className=\"mb-3\">\n                                        <Form.Label>Name</Form.Label>\n                                        <Form.Control\n                                             name=\"name\"\n                                             type=\"text\"\n                                             placeholder=\"Enter name\"\n                                             required\n                                             onChange={handleInputs}\n                                        />\n                                   </Form.Group>\n\n                                   <Form.Group className=\"mb-3\">\n                                        <Form.Label>Email address</Form.Label>\n                                        <Form.Control\n                                             name=\"email\"\n                                             type=\"email\"\n                                             placeholder=\"Enter email\"\n                                             required\n                                             onChange={handleInputs}\n                                        />\n                                        <Form.Text className=\"text-muted\">\n                                             We'll never share your email with\n                                             anyone else.\n                                        </Form.Text>\n                                   </Form.Group>\n\n                                   <Form.Group className=\"mb-3\">\n                                        <Form.Label>Create password</Form.Label>\n                                        <Form.Control\n                                             name=\"password\"\n                                             type=\"password\"\n                                             placeholder=\"Password\"\n                                             required\n                                             onChange={handleInputs}\n                                        />\n                                   </Form.Group>\n\n                                   <Form.Group className=\"mb-3\">\n                                        <Form.Label>\n                                             Confirm password\n                                        </Form.Label>\n                                        <Form.Control\n                                             name=\"cPassword\"\n                                             type=\"password\"\n                                             placeholder=\"Password\"\n                                             required\n                                             onChange={handleInputs}\n                                        />\n                                   </Form.Group>\n\n                                   <Button variant=\"primary\" type=\"submit\">\n                                        Sign up\n                                   </Button>\n                              </Form>\n                              <a onClick={ () => { navigate(\"/login\")}}>Login instead?</a>\n                         </div>\n                    </div>\n               </div>\n          </>\n     ) : (\n          <>\n               <div className=\"SignupContainer\">\n                    <div className=\"SignupPageContainer\">\n                         <div className=\"SignupPageChild1\">\n                              <img src={Signup_img} alt=\"img\" />\n                         </div>\n                         <div className=\"SignupPageChild2\">\n                              <Form onSubmit={handleSubmit}>\n                                   <Form.Group className=\"mb-3\">\n                                        <Form.Label>Name</Form.Label>\n                                        <Form.Control\n                                             name=\"name\"\n                                             type=\"text\"\n                                             placeholder=\"Enter name\"\n                                             required\n                                             onChange={handleInputs}\n                                        />\n                                   </Form.Group>\n\n                                   <Form.Group className=\"mb-3\">\n                                        <Form.Label>Email address</Form.Label>\n                                        <Form.Control\n                                             name=\"email\"\n                                             type=\"email\"\n                                             placeholder=\"Enter email\"\n                                             required\n                                             onChange={handleInputs}\n                                        />\n                                        <Form.Text className=\"text-muted\">\n                                             We'll never share your email with\n                                             anyone else.\n                                        </Form.Text>\n                                   </Form.Group>\n\n                                   <Form.Group className=\"mb-3\">\n                                        <Form.Label>Create password</Form.Label>\n                                        <Form.Control\n                                             name=\"password\"\n                                             type=\"password\"\n                                             placeholder=\"Password\"\n                                             required\n                                             onChange={handleInputs}\n                                        />\n                                   </Form.Group>\n\n                                   <Form.Group className=\"mb-3\">\n                                        <Form.Label>\n                                             Confirm password\n                                        </Form.Label>\n                                        <Form.Control\n                                             name=\"cPassword\"\n                                             type=\"password\"\n                                             placeholder=\"Password\"\n                                             required\n                                             onChange={handleInputs}\n                                        />\n                                   </Form.Group>\n\n                                   <Button variant=\"primary\" type=\"submit\">\n                                        Sign up\n                                   </Button>\n                              </Form>\n                              <a onClick={ () => { navigate(\"/login\")}}>Login instead?</a>\n                         </div>\n                    </div>\n               </div>\n          </>\n     );\n}\n","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Pages\\OrganisationsPage\\OrganisationsPage.js",["173","174"],[],"import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport OrganisationCard from \"../../Components/OrganisationCard\";\nimport testImg from \"./testimg.jpeg\";\nimport \"./OrganisationPage.css\";\nimport Footer from \"../../Components/Footer\";\nimport NavBar from \"../../Components/NavBar\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nexport default function OrganisationsPage(prop) {\n     const navigate = useNavigate();\n     let currentUser_ = {};\n\n     const [alertHead, setAlertHead] = useState(\"\");\n     const [alertBody, setAlertBody] = useState(\"\");\n     const [alertVarient, setAlertVarient] = useState(\"\");\n     const [show, setShow] = useState(false);\n     const [rerenderer, setRerenderer] = useState(false);\n     const [HtmlLoaded, setHtmlLoaded] = useState(false);\n     const [CardsComponent, setCardsComponent] = useState(null);\n\n     useEffect(() => {\n          currentUser_ = JSON.parse(localStorage.getItem(\"currentUser\"));\n          if (currentUser_ == null) {\n               navigate(\"/landing\");\n          }\n          const doWork = async () => {\n               let currentUser_ = JSON.parse(\n                    localStorage.getItem(\"currentUser\")\n               );\n               const reqData = {\n                    email: currentUser_.email,\n                    password: currentUser_.password,\n                    organisations: currentUser_.organisations,\n               };\n               try {\n                    const response = await fetch(\n                         \"https://dizkuz-server.onrender.com/organisations\",\n                         {\n                              method: \"POST\",\n                              body: JSON.stringify(reqData),\n                              headers: {\n                                   \"Content-Type\": \"application/json\",\n                              },\n                         }\n                    );\n                    const fetchedData = await response.json();\n                    if (fetchedData.status === \"authFailed\") {\n                         localStorage.removeItem(\"currentUser\");\n                         navigate(\"/landing\");\n                    } else if (fetchedData.status === \"failed\") {\n                         setAlertHead(\"Data failed to retrieve!\");\n                         setAlertBody(\n                              \"There was some unexpected error in retrieving the data of your organisations. Please try again.\"\n                         );\n                         setAlertVarient(\"danger\");\n                         setShow(true);\n                    } else {\n                         const cards = fetchedData.data;\n                         let tempCardsComponent;\n                         if (cards.length === 0) {\n                              tempCardsComponent = (\n                                   <div\n                                        style={{\n                                             paddingTop: \"100px\",\n                                             paddingBottom: \"100px\",\n                                             color: \"darkred\",\n                                        }}\n                                   >\n                                        <h4>\n                                             Sorry, currently you do not belong\n                                             to any organisation. Try creating\n                                             your own organisation.\n                                        </h4>\n                                   </div>\n                              );\n                         } else {\n                              tempCardsComponent = cards.map((card) => {\n                                   return (\n                                        <div>\n                                             <OrganisationCard\n                                                  title={card.name}\n                                                  id={card._id}\n                                                  key={card._id}\n                                                  rerenderer={rerenderer}\n                                                  setRerenderer={setRerenderer}\n                                             />\n                                        </div>\n                                   );\n                              });\n                         }\n                         setCardsComponent(tempCardsComponent);\n                         setHtmlLoaded(true);\n                    }\n               } catch (error) {\n                    setAlertHead(\"Data failed to retrieve!\");\n                    setAlertBody(\n                         \"There was some error in retrieving the data of your organisations. Please check your connection and try again.\"\n                    );\n                    setAlertVarient(\"danger\");\n                    setShow(true);\n               }\n          };\n          doWork();\n     }, [rerenderer]);\n     return HtmlLoaded ? (\n          show ? (\n               <>\n                    <NavBar />\n                    <div style={{ paddingTop: \"56px\" }}>\n                         <Alert\n                              variant={alertVarient}\n                              onClose={() => setShow(false)}\n                              dismissible\n                         >\n                              <Alert.Heading>{alertHead}</Alert.Heading>\n                              <p>{alertBody}</p>\n                         </Alert>\n                         <div className=\"OrganisationPageContainer1\">\n                              <h3 style={{ textAlign: \"center\" }}>\n                                   Your Organisations\n                              </h3>\n                              <hr />\n                              <div className=\"OrganisationPageContainer2\">\n                                   {CardsComponent}\n                              </div>\n                         </div>\n                    </div>\n                    <Footer />\n               </>\n          ) : (\n               <>\n                    <NavBar />\n                    <div style={{ paddingTop: \"100px\" }}>\n                         <div className=\"OrganisationPageContainer1\">\n                              <h3 style={{ textAlign: \"center\" }}>\n                                   Your Organisations\n                              </h3>\n                              <hr />\n                              <div className=\"OrganisationPageContainer2\">\n                                   {CardsComponent}\n                              </div>\n                         </div>\n                    </div>\n                    <Footer />\n               </>\n          )\n     ) : (\n          <>\n               <NavBar />\n               <div className=\"SpinnerContainer\">\n                    <Spinner animation=\"border\" variant=\"dark\" />\n               </div>\n               <Footer />\n          </>\n     );\n}\n","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Pages\\IssuePage\\IssuePage.js",["175","176","177","178","179"],[],"import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport IssueCard from \"../../Components/IssueCard\";\nimport Button from \"react-bootstrap/Button\";\nimport \"./IssuePage.css\";\nimport Footer from \"../../Components/Footer\";\nimport NavBar from \"../../Components/NavBar\";\nimport AddImg from \"./AddImg.png\";\nimport Form from \"react-bootstrap/Form\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Alert from \"react-bootstrap/Alert\";\n\nfunction NewIssueModal(props) {\n     const navigate = useNavigate();\n\n     const [IssueName, setIssueName] = useState(\"\");\n     const [IssueDescription, setIssueDescription] = useState(\"\");\n\n     const updateIssueName = (e) => {\n          setIssueName(e.target.value);\n     };\n\n     const updateIssueDescription = (e) => {\n          setIssueDescription(e.target.value);\n     };\n\n     const addIssue = async (e) => {\n          props.onHide();\n          try {\n               const dizkuzData = JSON.parse(\n                    localStorage.getItem(\"dizkuzData\")\n               );\n               const currentUser_ = JSON.parse(\n                    localStorage.getItem(\"currentUser\")\n               );\n               const CatID = dizkuzData.currentCategory;\n               const inp = {\n                    name: currentUser_.name,\n                    email: currentUser_.email,\n                    password: currentUser_.password,\n                    NAME: IssueName,\n                    DESCRIPTION: IssueDescription,\n                    ID: CatID,\n               };\n               const response = await fetch(\"https://dizkuz-server.onrender.com/newIssue\", {\n                    method: \"POST\",\n                    body: JSON.stringify(inp),\n                    headers: {\n                         \"Content-Type\": \"application/json\",\n                    },\n               });\n               const data = await response.json();\n               if (data == null) {\n                    props.setAlertHead(\"Issue already exists!\");\n                    props.setAlertBody(\n                         \"A Issue with the same name in this category already exists. Please try making some changes in the name and then try again.\"\n                    );\n                    props.setAlertVarient(\"warning\");\n                    props.setAlertShow(true);\n               } else if (data.status === \"success\") {\n                    props.setAlertHead(\"Issue Added successfully!\");\n                    props.setAlertBody(\n                         \"The issue you just created has been added into the database. If you cannot find it, please try reloading the page.\"\n                    );\n                    props.setAlertVarient(\"success\");\n                    props.setAlertShow(true);\n                    const redirectURL = \"/issues\";\n                    localStorage.setItem(\n                         \"dizkuzredirectURL\",\n                         JSON.stringify(redirectURL)\n                    );\n                    navigate(\"/redirect\");\n               } else {\n                    props.setAlertHead(\"Some unknown Error occured!\");\n                    props.setAlertBody(\n                         \"There was some unexpected error which prevented us to create the issue you wanted. Please try again.\"\n                    );\n                    props.setAlertVarient(\"danger\");\n                    props.setAlertShow(true);\n               }\n          } catch (error) {\n               props.setAlertHead(\"Unexpected Error occured!\");\n               props.setAlertBody(\n                    \"Some unknown error occured. Please check your connection and try again.\"\n               );\n               props.setAlertVarient(\"danger\");\n               props.setAlertShow(true);\n          }\n\n          props.setRerenderer(!props.rerenderer);\n     };\n\n     return (\n          <Modal\n               {...props}\n               size=\"lg\"\n               aria-labelledby=\"contained-modal-title-vcenter\"\n               centered\n          >\n               <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\n                         New Issue\n                    </Modal.Title>\n               </Modal.Header>\n               <Modal.Body>\n                    <Form.Control\n                         type=\"text\"\n                         placeholder=\"Enter Issue name\"\n                         style={{ marginBottom: \"5px\" }}\n                         value={IssueName}\n                         onChange={updateIssueName}\n                    />\n                    <Form.Control\n                         type=\"textarea\"\n                         placeholder=\"Enter Issue description\"\n                         style={{ marginTop: \"5px\" }}\n                         value={IssueDescription}\n                         onChange={updateIssueDescription}\n                    />\n               </Modal.Body>\n               <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={props.onHide}>\n                         Cancel\n                    </Button>\n                    <Button variant=\"primary\" onClick={addIssue}>\n                         Create\n                    </Button>\n               </Modal.Footer>\n          </Modal>\n     );\n}\n\nexport default function IssuePage() {\n     const navigate = useNavigate();\n\n     const [alertHead, setAlertHead] = useState(\"\");\n     const [alertBody, setAlertBody] = useState(\"\");\n     const [alertVarient, setAlertVarient] = useState(\"\");\n     const [Alertshow, setAlertShow] = useState(false);\n     const [rerenderer, setRerenderer] = useState(false);\n     const [modalShow, setModalShow] = React.useState(false);\n     const [HtmlLoaded, setHtmlLoaded] = useState(false);\n     const [IssueComponent, setIssueComponent] = useState(<></>);\n     const [CategoryName, setCategoryName] = useState(\"\");\n     const [OrganisationName, setOrganisationName] = useState(\"\");\n\n     const JumpToAddIssue = () => {\n          setModalShow(true);\n     };\n\n     let currentUser_ = {};\n\n     useEffect(() => {\n          currentUser_ = JSON.parse(localStorage.getItem(\"currentUser\"));\n          if (currentUser_ == null) {\n               navigate(\"/landing\");\n          }\n          const doWork = async () => {\n               try {\n                    const dizkuzData = JSON.parse(\n                         localStorage.getItem(\"dizkuzData\")\n                    );\n                    const currentUser_ = JSON.parse(\n                         localStorage.getItem(\"currentUser\")\n                    );\n                    setOrganisationName(dizkuzData.currentOrganisationName);\n                    setCategoryName(dizkuzData.currentCategoryName);\n                    const CatID = dizkuzData.currentCategory;\n                    const inp = {\n                         email: currentUser_.email,\n                         password: currentUser_.password,\n                         ID: CatID,\n                    };\n                    const response = await fetch(\n                         \"https://dizkuz-server.onrender.com/issues\",\n                         {\n                              method: \"POST\",\n                              body: JSON.stringify(inp),\n                              headers: {\n                                   \"Content-Type\": \"application/json\",\n                              },\n                         }\n                    );\n                    const fetchData = await response.json();\n                    if (fetchData.status === \"authFailed\") {\n                         localStorage.removeItem(\"currentUser\");\n                         navigate(\"/landing\");\n                    } else if (fetchData.status == \"failed\") {\n                         setAlertHead(\"Unknown error occured\");\n                         setAlertBody(\n                              \"Due to some unexpected error, the issues were not loaaded. Please try again.\"\n                         );\n                         setAlertVarient(\"danger\");\n                         setAlertShow(true);\n                    } else {\n                         const LoadedData = fetchData.data;\n                         const Issues = LoadedData;\n                         let tempVar;\n                         if (Issues.length == 0) {\n                              tempVar = (\n                                   <div\n                                        style={{\n                                             paddingTop: \"100px\",\n                                             paddingBottom: \"50px\",\n                                             color: \"darkred\",\n                                        }}\n                                   >\n                                        <h4>Sorry, No issue exists.</h4>\n                                   </div>\n                              );\n                         } else {\n                              tempVar = Issues.map((issue) => {\n                                   return (\n                                        <div>\n                                             <IssueCard\n                                                  title={issue.title}\n                                                  body={issue.body}\n                                                  id={issue._id}\n                                                  author={issue.author}\n                                                  date={issue.date}\n                                                  key={issue.id}\n                                             />\n                                        </div>\n                                   );\n                              });\n                         }\n                         const tempIssueComponent = tempVar;\n                         setRerenderer(!rerenderer);\n                         setIssueComponent(tempIssueComponent);\n                         setHtmlLoaded(true);\n                    }\n               } catch (error) {\n                    setAlertHead(\"Unexpected error occured!\");\n                    setAlertBody(\n                         \"Due to some unexpected error we were not able to get the issues for you. Please check your connection and try again...\"\n                    );\n                    setAlertVarient(\"danger\");\n                    setAlertShow(true);\n               }\n          };\n          doWork();\n     }, [rerenderer]);\n\n     return HtmlLoaded ? (\n          Alertshow ? (\n               <>\n                    <NavBar />\n                    <div style={{height : '80px'}}></div>\n                    <Alert\n                         variant={alertVarient}\n                         onClose={() => setAlertShow(false)}\n                         dismissible\n                    >\n                         <Alert.Heading>{alertHead}</Alert.Heading>\n                         <p>{alertBody}</p>\n                    </Alert>\n                    <div\n                         className=\"IssuePageOuterContainer\"\n                         style={{ paddingTop: \"100px\" }}\n                    >\n                         <h3 style={{ textAlign: \"center\" }}>\n                              <span style={{ fontSize: \"25px\" }}>\n                                   {OrganisationName}\n                              </span>\n                              <span style={{ fontSize: \"50px\" }}>\n                                   <b>/{CategoryName}</b>\n                              </span>\n                         </h3>\n                         <hr />\n                         <div className=\"IssuePageContainer\">\n                              <div\n                                   className=\"NewIssue\"\n                                   onClick={JumpToAddIssue}\n                              >\n                                   <div>\n                                        <div className=\"NewIssueCont\">\n                                             <img\n                                                  src={AddImg}\n                                                  height={\"100px\"}\n                                             />\n                                        </div>\n                                        <div>Add new issue</div>\n                                   </div>\n                              </div>\n                              {IssueComponent}\n                         </div>\n                    </div>\n                    <NewIssueModal\n                         show={modalShow}\n                         onHide={() => setModalShow(false)}\n                         rerenderer={rerenderer}\n                         setRerenderer={setRerenderer}\n                    />\n                    <Footer />\n               </>\n          ) : (\n               <>\n                    <NavBar />\n                    <div style={{height : '80px'}}></div>\n                    <div\n                         className=\"IssuePageOuterContainer\"\n                         style={{ paddingTop: \"10px\" }}\n                    >\n                         <h3 style={{ textAlign: \"center\" }}>\n                              <span style={{ fontSize: \"25px\" }}>\n                                   {OrganisationName}\n                              </span>\n                              <span style={{ fontSize: \"50px\" }}>\n                                   <b>/{CategoryName}</b>\n                              </span>\n                         </h3>\n                         <hr />\n                         <div className=\"IssuePageContainer\">\n                              <div\n                                   className=\"NewIssue\"\n                                   onClick={JumpToAddIssue}\n                              >\n                                   <div>\n                                        <div className=\"NewIssueCont\">\n                                             <img\n                                                  src={AddImg}\n                                                  height={\"100px\"}\n                                             />\n                                        </div>\n                                        <div>Add new issue</div>\n                                   </div>\n                              </div>\n                              {IssueComponent}\n                         </div>\n                    </div>\n                    <NewIssueModal\n                         show={modalShow}\n                         onHide={() => setModalShow(false)}\n                         rerenderer={rerenderer}\n                         setRerenderer={setRerenderer}\n                    />\n                    <Footer />\n               </>\n          )\n     ) : (\n          <>\n               <NavBar />\n               <div className=\"SpinnerContainer\">\n                    <Spinner animation=\"border\" variant=\"dark\" />\n               </div>\n               <Footer />\n          </>\n     );\n}\n","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Pages\\NewOrganisationPage\\NewOrganisationPage.js",["180","181"],[],"import React, { useEffect, useState } from \"react\";\nimport NavBar from \"../../Components/NavBar\";\nimport Footer from \"../../Components/Footer\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport \"./NewOrganisationPage.css\";\nimport { useNavigate } from \"react-router-dom\";\nimport Alert from \"react-bootstrap/Alert\";\n\nexport default function NewOrganisationPage() {\n     const [alertHead, setAlertHead] = useState(\"\");\n     const [alertBody, setAlertBody] = useState(\"\");\n     const [variant, setVariant] = useState(\"\");\n     const [show, setShow] = useState(false);\n     const navigate = useNavigate();\n     const [participants, setParticipants] = useState([]);\n     const [dummy, setDummy] = useState(true);\n     const [OrganisationName, setOrganisationName] = useState(\"\");\n\n     let NewUserID = \"\";\n     let currentUser_ = {};\n     let participants_ = participants;\n\n     let participantComponent = participants_.map((participant) => {\n          return (\n               <>\n                    <p>{participant}</p>\n               </>\n          );\n     });\n     const handleInputName = (e) => {\n          setOrganisationName(e.target.value);\n     };\n     const handleID = (e) => {\n          NewUserID = e.target.value;\n     };\n     const AddNewUser = async (e) => {\n          e.preventDefault();\n          if (NewUserID == \"\") {\n               setAlertHead(\"UserID is empty!\");\n               setAlertBody(\n                    \"The userID cannot be an empty string. Please enter userID.\"\n               );\n               setVariant(\"warning\");\n               setShow(true);\n          } else {\n               const checkID = {\n                    userID: NewUserID,\n               };\n               try {\n                    const response = await fetch(\n                         \"https://dizkuz-server.onrender.com/checkuserid\",\n                         {\n                              method: \"POST\",\n                              body: JSON.stringify(checkID),\n                              headers: {\n                                   \"Content-Type\": \"application/json\",\n                              },\n                         }\n                    );\n                    const data = await response.json();\n                    if (data.status === \"Found\") {\n                         setAlertHead(\"User Added Succesfully!\");\n                         setAlertBody(\n                              \"The user has been added to the organisation\"\n                         );\n                         setVariant(\"success\");\n                         setShow(true);\n                         let arr = participants;\n                         arr.push(NewUserID);\n                         setParticipants(arr);\n                         setDummy(!dummy);\n                         document.getElementsByClassName(\n                              \"newUserIDUserInput\"\n                         )[0].value = \"\";\n                    } else {\n                         setAlertHead(\"User not found!\");\n                         setAlertBody(\n                              \"The userID you entered does not exist in our database. Please check it and try again.\"\n                         );\n                         setVariant(\"danger\");\n                         setShow(true);\n                    }\n               } catch (error) {\n                    setAlertHead(\"Unknown error occured!\");\n                    setAlertBody(\n                         \"An unknown error occured. please check your network and try again.\"\n                    );\n                    setVariant(\"danger\");\n                    setShow(true);\n               }\n          }\n     };\n     const handleSubmit = async (e) => {\n          e.preventDefault();\n          const currentUser_ = JSON.parse(localStorage.getItem(\"currentUser\"));\n          const organisation = {\n               name: currentUser_.name,\n               email: currentUser_.email,\n               password: currentUser_.password,\n               organisations: currentUser_.organisations,\n               User_id: currentUser_._id,\n               users: participants,\n               OrgName: OrganisationName,\n          };\n          try {\n               const response = await fetch(\"https://dizkuz-server.onrender.com/newOrg\", {\n                    method: \"POST\",\n                    body: JSON.stringify(organisation),\n                    headers: {\n                         \"Content-Type\": \"application/json\",\n                    },\n               });\n               const data = await response.json();\n               if (data.status === \"Success\") {\n                    let curUser = {\n                         name: data.name,\n                         email: data.email,\n                         password: data.password,\n                         organisations: data.organisations,\n                         messages: data.messages,\n                         _id: data._id,\n                         __v: data.__v,\n                    };\n                    localStorage.removeItem(\"currentUser\");\n                    localStorage.setItem(\n                         \"currentUser\",\n                         JSON.stringify(curUser)\n                    );\n                    navigate(\"/organisations\");\n               } else {\n                    setAlertHead(\"Unknown error occured!\");\n                    setAlertBody(\n                         \"An unknown error occured. please check your network and try again.\"\n                    );\n                    setShow(true);\n               }\n          } catch (error) {\n               setAlertHead(\"Unknown error occured!\");\n               setAlertBody(\n                    \"An unknown error occured. please check your network and try again.\"\n               );\n               setShow(true);\n          }\n     };\n\n     useEffect(() => {\n          currentUser_ = JSON.parse(localStorage.getItem(\"currentUser\"));\n          if (currentUser_ == null) {\n               navigate(\"/landing\");\n          }\n     }, []);\n\n     return show ? (\n          <div>\n               <div style={{ height: \"50px\" }}></div>\n               <Alert\n                    variant={variant}\n                    onClose={() => setShow(false)}\n                    dismissible\n               >\n                    <Alert.Heading>{alertHead}</Alert.Heading>\n                    <p>{alertBody}</p>\n               </Alert>\n               <>\n                    <NavBar />\n                    <div\n                         className=\"NewOrganisationContainer\"\n                         style={{ paddingTop: \"0px\" }}\n                    >\n                         <h4>Create New Organisation</h4>\n                         <div className=\"NewOrganisationSubContainer\">\n                              <Form\n                                   className=\"NewOrganisationSubContainer2\"\n                                   onSubmit={handleSubmit}\n                              >\n                                   <Form.Group\n                                        className=\"mb-3\"\n                                        controlId=\"formBasicEmail\"\n                                   >\n                                        <Form.Label>\n                                             Organisation's name\n                                        </Form.Label>\n                                        <Form.Control\n                                             type=\"text\"\n                                             placeholder=\"Enter your organisation's name\"\n                                             name=\"organisationName\"\n                                             value={OrganisationName}\n                                             onChange={handleInputName}\n                                             required\n                                        />\n                                        <Form.Text className=\"text-muted\">\n                                             Name of an organisation can never\n                                             be changed again.\n                                        </Form.Text>\n                                   </Form.Group>\n                                   <div className=\"participantContainer\">\n                                        <b>Users</b>\n                                        <hr />\n                                        <div style={{ textAlign: \"start\" }}>\n                                             {participantComponent}\n                                        </div>\n                                   </div>\n                                   <Form.Group\n                                        className=\"mb-3\"\n                                        controlId=\"formBasicEmail\"\n                                   >\n                                        <Form.Label>Add user</Form.Label>\n                                        <Form.Control\n                                             type=\"text\"\n                                             placeholder=\"Enter the ID of the user\"\n                                             name=\"newUserID\"\n                                             onChange={handleID}\n                                             className=\"newUserIDUserInput\"\n                                        />\n                                        <Form.Text className=\"text-muted\">\n                                             Leave it blank if you don't want to\n                                             add more users.\n                                        </Form.Text>\n                                   </Form.Group>\n                                   <Button\n                                        variant=\"outline-primary\"\n                                        className=\"newOrgButton\"\n                                        onClick={AddNewUser}\n                                   >\n                                        Add User\n                                   </Button>\n                                   <Button\n                                        variant=\"primary\"\n                                        type=\"submit\"\n                                        className=\"newOrgButton\"\n                                        onClick={handleSubmit}\n                                   >\n                                        Create Organisation\n                                   </Button>\n                              </Form>\n                         </div>\n                    </div>\n                    <Footer />\n               </>\n          </div>\n     ) : (\n          <div>\n               <>\n                    <NavBar />\n                    <div\n                         className=\"NewOrganisationContainer\"\n                         style={{ paddingTop: \"70px\" }}\n                    >\n                         <h4>Create New Organisation</h4>\n                         <div className=\"NewOrganisationSubContainer\">\n                              <Form className=\"NewOrganisationSubContainer2\">\n                                   <Form.Group\n                                        className=\"mb-3\"\n                                        controlId=\"formBasicEmail\"\n                                   >\n                                        <Form.Label>\n                                             Organisation's name\n                                        </Form.Label>\n                                        <Form.Control\n                                             type=\"text\"\n                                             placeholder=\"Enter your organisation's name\"\n                                             name=\"organisationName\"\n                                             value={OrganisationName}\n                                             onChange={handleInputName}\n                                             required\n                                        />\n                                        <Form.Text className=\"text-muted\">\n                                             Name of an organisation can never\n                                             be changed again.\n                                        </Form.Text>\n                                   </Form.Group>\n                                   <div className=\"participantContainer\">\n                                        <b>Users</b>\n                                        <hr />\n                                        <div style={{ textAlign: \"start\" }}>\n                                             {participantComponent}\n                                        </div>\n                                   </div>\n                                   <Form.Group\n                                        className=\"mb-3\"\n                                        controlId=\"formBasicEmail\"\n                                   >\n                                        <Form.Label>Add user</Form.Label>\n                                        <Form.Control\n                                             type=\"text\"\n                                             placeholder=\"Enter the ID of the user\"\n                                             name=\"newUserID\"\n                                             onChange={handleID}\n                                             className=\"newUserIDUserInput\"\n                                        />\n                                        <Form.Text className=\"text-muted\">\n                                             Leave it blank if you don't want to\n                                             add more users.\n                                        </Form.Text>\n                                   </Form.Group>\n                                   <Button\n                                        variant=\"outline-primary\"\n                                        className=\"newOrgButton\"\n                                        onClick={AddNewUser}\n                                   >\n                                        Add User\n                                   </Button>\n                                   <Button\n                                        variant=\"primary\"\n                                        type=\"submit\"\n                                        className=\"newOrgButton\"\n                                        onClick={handleSubmit}\n                                   >\n                                        Create Organisation\n                                   </Button>\n                              </Form>\n                         </div>\n                    </div>\n                    <Footer />\n               </>\n          </div>\n     );\n}\n","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Pages\\MembersPage\\MembersPage.js",["182","183","184"],[],"import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Footer from \"../../Components/Footer\";\nimport NavBar from \"../../Components/NavBar\";\nimport \"./MembersPage.css\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport MemberCard from \"../../Components/MemberCard\";\nimport Alert from \"react-bootstrap/Alert\";\n\nexport default function MembersPage() {\n     const navigate = useNavigate();\n\n     let currentUser_ = {};\n\n     const [MembersComponent, setMembersComponent] = useState(<></>);\n     const [OrganisationName, setOrganisationName] = useState(\"Organisation 1\");\n     const [alertHead, setAlertHead] = useState(\"\");\n     const [alertBody, setAlertBody] = useState(\"\");\n     const [alertVarient, setAlertVarient] = useState(\"\");\n     const [Alertshow, setAlertShow] = useState(false);\n     const [rerenderer, setRerenderer] = useState(false);\n     const [HtmlLoaded, setHtmlLoaded] = useState(false);\n\n     useEffect(() => {\n          currentUser_ = JSON.parse(localStorage.getItem(\"currentUser\"));\n          if (currentUser_ == null) {\n               navigate(\"/landing\");\n          }\n          const doWork = async () => {\n               try {\n                    const dizkuzData = JSON.parse(\n                         localStorage.getItem(\"dizkuzData\")\n                    );\n                    const currentUser_ = JSON.parse(\n                         localStorage.getItem(\"currentUser\")\n                    );\n                    const OrgID = dizkuzData.currentOrganisation;\n                    setOrganisationName(dizkuzData.currentOrganisationName);\n                    const inp = {\n                         email: currentUser_.email,\n                         password: currentUser_.password,\n                         ID: OrgID,\n                    };\n                    const response = await fetch(\n                         \"https://dizkuz-server.onrender.com/members\",\n                         {\n                              method: \"POST\",\n                              body: JSON.stringify(inp),\n                              headers: {\n                                   \"Content-Type\": \"application/json\",\n                              },\n                         }\n                    );\n                    const fetchData = await response.json();\n                    if (fetchData.status === \"authFailed\") {\n                         localStorage.removeItem(\"currentUser\");\n                         navigate(\"/landing\");\n                    } else if (fetchData.status == \"failed\") {\n                         setAlertHead(\"Unknown error occured\");\n                         setAlertBody(\n                              \"Due to some unexpected error, the members were not loaaded. Please try again.\"\n                         );\n                         setAlertVarient(\"danger\");\n                         setAlertShow(true);\n                    } else {\n                         const LoadedData = fetchData.data;\n                         const Members = LoadedData;\n                         let tempVar;\n                         if (Members.length == 0) {\n                              tempVar = (\n                                   <div\n                                        style={{\n                                             paddingTop: \"100px\",\n                                             paddingBottom: \"50px\",\n                                             color: \"darkred\",\n                                        }}\n                                   >\n                                        <h4>Sorry, No Member exists.</h4>\n                                   </div>\n                              );\n                         } else {\n                              tempVar = Members.map((member) => {\n                                   return (\n                                        <MemberCard\n                                             name={member.name}\n                                             email={member.email}\n                                             _id={member._id}\n                                        />\n                                   );\n                              });\n                         }\n                         const tempMemberComponent = tempVar;\n\n                         setRerenderer(!rerenderer);\n                         setMembersComponent(tempMemberComponent);\n                         setHtmlLoaded(true);\n                    }\n               } catch (error) {\n                    setAlertHead(\"Unexpected error occured!\");\n                    setAlertBody(\n                         \"Due to some unexpected error we were not able to get the Members for you. Please check your connection and try again...\"\n                    );\n                    setAlertVarient(\"danger\");\n                    setAlertShow(true);\n               }\n          };\n          doWork();\n     }, []);\n     return HtmlLoaded ? (\n          Alertshow ? (\n               <>\n                    <NavBar />\n                    {/* <div style={{height:'10px'}}></div> */}\n                    <Alert\n                         variant={alertVarient}\n                         onClose={() => setAlertShow(false)}\n                         dismissible\n                    >\n                         <Alert.Heading>{alertHead}</Alert.Heading>\n                         <p>{alertBody}</p>\n                    </Alert>\n                    <div style={{ padding: \"20px\", paddingTop: \"0px\" }}>\n                         <h3>{OrganisationName}</h3> <hr />\n                         <div className=\"MembersHeading\">\n                              <h4>Members</h4>\n                         </div>\n                         <div className=\"MembersContainer\">\n                              {MembersComponent}\n                         </div>\n                    </div>\n                    <Footer />\n               </>\n          ) : (\n               <>\n                    <NavBar />\n                    <div style={{ padding: \"20px\", marginTop: \"10px\" }}>\n                         <h3>{OrganisationName}</h3> <hr />\n                         <div className=\"MembersHeading\">\n                              <h4>Members33</h4>\n                         </div>\n                         <div className=\"MembersContainer\">\n                              {MembersComponent}\n                         </div>\n                    </div>\n                    <Footer />\n               </>\n          )\n     ) : (\n          <>\n               <NavBar />\n               <div className=\"SpinnerContainer\">\n                    <Spinner animation=\"border\" variant=\"dark\" />\n               </div>\n               <Footer />\n          </>\n     );\n}\n","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Pages\\ChatPage\\ChatPage.js",["185","186","187"],[],"import React, { useState, useEffect } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { useNavigate } from \"react-router-dom\";\nimport MessageCardOther from \"../../Components/MessageCardOther\";\nimport MessageCardUser from \"../../Components/MessageCardUser\";\nimport \"./ChatPage.css\";\nimport MessageInput from \"../../Components/MessageInput\";\nimport NavBar from \"../../Components/NavBar\";\nimport Footer from \"../../Components/Footer\";\nimport Spinner from \"react-bootstrap/esm/Spinner\";\n// Messages\n// const messages = [\n//     {\n//         author : 'Ambani',\n//         text : 'Hello!',\n//         dateTime : '7:30 AM 24th April 2022',\n//         userAuth : false\n//     },\n// ];\n\nexport default function ChatPage() {\n     const navigate = useNavigate();\n     const [HtmlLoaded, setHtmlLoaded] = useState(false);\n     const [MessageComponent, setMessageComponent] = useState(<></>);\n     const [alertHead, setAlertHead] = useState(\"\");\n     const [alertBody, setAlertBody] = useState(\"\");\n     const [alertVarient, setAlertVarient] = useState(\"\");\n     const [Alertshow, setAlertShow] = useState(false);\n     const [rerenderer, setRerenderer] = useState(false);\n     const [currentSender, setCurrentSender] = useState(\"\");\n     const [currentIssue, setCurrentIssue] = useState(\"\");\n     const [chatReloader, setChatReloader] = useState(1);\n\n     const startReloading = () => {\n          setChatReloader(chatReloader + 1);\n     };\n     let currentUser_ = {};\n\n     useEffect(() => {\n          currentUser_ = JSON.parse(localStorage.getItem(\"currentUser\"));\n          if (currentUser_ == null) {\n               navigate(\"/landing\");\n          }\n\n          const doWork = async () => {\n               try {\n                    const dizkuzData = JSON.parse(\n                         localStorage.getItem(\"dizkuzData\")\n                    );\n                    const currentUser_ = JSON.parse(\n                         localStorage.getItem(\"currentUser\")\n                    );\n                    const IssID = dizkuzData.currentIssue;\n                    const UsrID = currentUser_._id;\n\n                    setCurrentSender(UsrID);\n                    setCurrentIssue(IssID);\n\n                    const inp = {\n                         email: currentUser_.email,\n                         password: currentUser_.password,\n                         IssueID: IssID,\n                         UserID: UsrID,\n                    };\n                    const response = await fetch(\n                         \"https://dizkuz-server.onrender.com/chats\",\n                         {\n                              method: \"POST\",\n                              body: JSON.stringify(inp),\n                              headers: {\n                                   \"Content-Type\": \"application/json\",\n                              },\n                         }\n                    );\n                    const fetchData = await response.json();\n                    if (fetchData.status === \"authFailed\") {\n                         localStorage.removeItem(\"currentUser\");\n                         navigate(\"/landing\");\n                    } else if (fetchData.status == \"failed\") {\n                         setAlertHead(\"Unknown error occured\");\n                         setAlertBody(\n                              \"Due to some unexpected error messages are unable to be loaded. Please try again.\"\n                         );\n                         setAlertVarient(\"danger\");\n                         setAlertShow(true);\n                    } else {\n                         const LoadedData = fetchData.data;\n                         const Messages = LoadedData;\n                         let tempVar;\n                         if (Messages.length == 0) {\n                              tempVar = (\n                                   <div\n                                        style={{\n                                             paddingTop: \"100px\",\n                                             paddingBottom: \"50px\",\n                                             color: \"darkred\",\n                                        }}\n                                   >\n                                        <h4>\n                                             No conversation exists in this\n                                             chat. Send a message to start a\n                                             conversation...\n                                        </h4>\n                                   </div>\n                              );\n                         } else {\n                              tempVar = Messages.map((message) => {\n                                   return message.userAuth ? (\n                                        <div>\n                                             <MessageCardOther\n                                                  author={message.author}\n                                                  text={message.text}\n                                                  dateTime={message.dateTime}\n                                             />\n                                        </div>\n                                   ) : (\n                                        <div>\n                                             <MessageCardUser\n                                                  author={message.author}\n                                                  text={message.text}\n                                                  dateTime={message.dateTime}\n                                             />\n                                        </div>\n                                   );\n                              });\n                         }\n                         const tempMessageComponent = tempVar;\n                         setRerenderer(!rerenderer);\n                         setMessageComponent(tempMessageComponent);\n                         setHtmlLoaded(true);\n                    }\n               } catch (error) {\n                    setAlertHead(\"Unexpected error occured!\");\n                    setAlertBody(\n                         \"Due to some unexpected error we were not able to get the Messages for you. Please check your connection and try again...\"\n                    );\n                    setAlertVarient(\"danger\");\n                    setAlertShow(true);\n               }\n          };\n          doWork();\n          setInterval(() => {\n               startReloading();\n          }, 5000);\n     }, [chatReloader]);\n\n     return HtmlLoaded ? (\n          Alertshow ? (\n               <>\n                    <NavBar />\n                    <div style={{ height: \"56px\" }}></div>\n                    <Alert\n                         variant={alertVarient}\n                         onClose={() => setAlertShow(false)}\n                         dismissible\n                    >\n                         <Alert.Heading>{alertHead}</Alert.Heading>\n                         <p>{alertBody}</p>\n                    </Alert>\n                    <div\n                         className=\"ChatPageContainer\"\n                         style={{ paddingTop: \"0px\" }}\n                    >\n                         <div className=\"ChatPageContainer2\">\n                              {MessageComponent}\n                         </div>\n                    </div>\n                    <MessageInput\n                         senderID={currentSender}\n                         IssueID={currentIssue}\n                         chatReloader={chatReloader}\n                         setChatReloader={setChatReloader}\n                    />\n                    <div style={{ height: \"64px\" }}></div>\n               </>\n          ) : (\n               <>\n                    <NavBar />\n                    <div style={{ height: \"56px\" }}></div>\n                    <div className=\"ChatPageContainer\">\n                         <div className=\"ChatPageContainer2\">\n                              {MessageComponent}\n                         </div>\n                    </div>\n                    <div style={{ height: \"64px\" }}></div>\n                    <MessageInput\n                         senderID={currentSender}\n                         IssueID={currentIssue}\n                         chatReloader={chatReloader}\n                         setChatReloader={setChatReloader}\n                    />\n               </>\n          )\n     ) : (\n          <>\n               <NavBar />\n               <div className=\"SpinnerContainer\">\n                    <Spinner animation=\"border\" variant=\"dark\" />\n               </div>\n               <Footer />\n          </>\n     );\n}\n","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Pages\\CategoryPage\\CategoryPage.js",["188","189","190"],[],"import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Button from \"react-bootstrap/Button\";\nimport CategoryCard from \"../../Components/CategoryCard\";\nimport \"./CategoryPage.css\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Footer from \"../../Components/Footer\";\nimport NavBar from \"../../Components/NavBar\";\nimport Form from \"react-bootstrap/Form\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Alert from \"react-bootstrap/Alert\";\n\nfunction NewCategoryModal(props) {\n     const [CategoryName, setCategoryName] = useState(\"\");\n\n     const navigate = useNavigate();\n\n     const updateCategoryName = (e) => {\n          setCategoryName(e.target.value);\n     };\n\n     const addCategory = async (e) => {\n          props.onHide();\n          try {\n               const dizkuzData = JSON.parse(\n                    localStorage.getItem(\"dizkuzData\")\n               );\n               const currentUser_ = JSON.parse(\n                    localStorage.getItem(\"currentUser\")\n               );\n               const OrgID = dizkuzData.currentOrganisation;\n               const inp = {\n                    name: currentUser_.name,\n                    email: currentUser_.email,\n                    password: currentUser_.password,\n                    organisations: currentUser_.organisations,\n                    User_id: currentUser_._id,\n                    NAME: CategoryName,\n                    ID: OrgID,\n               };\n               const response = await fetch(\n                    \"https://dizkuz-server.onrender.com/newCategory\",\n                    {\n                         method: \"POST\",\n                         body: JSON.stringify(inp),\n                         headers: {\n                              \"Content-Type\": \"application/json\",\n                         },\n                    }\n               );\n               const data = await response.json();\n               if (data == null) {\n                    props.setAlertHead(\"Category already exists!\");\n                    props.setAlertBody(\n                         \"A category with the same name in this organisation already exists. Please try making some changes in the name and then try again.\"\n                    );\n                    props.setAlertVarient(\"warning\");\n                    props.setAlertShow(true);\n               } else if (data.status === \"success\") {\n                    props.setAlertHead(\"Category Added successfully!\");\n                    props.setAlertBody(\n                         \"The category you just created has been added into the database. If you cannot find it, please try reloading the page.\"\n                    );\n                    props.setAlertVarient(\"success\");\n                    props.setAlertShow(true);\n                    const redirectURL = \"/categories\";\n                    localStorage.setItem(\n                         \"dizkuzredirectURL\",\n                         JSON.stringify(redirectURL)\n                    );\n                    navigate(\"/redirect\");\n               } else {\n                    props.setAlertHead(\"Some unknown Error occured!\");\n                    props.setAlertBody(\n                         \"There was some unexpected error which prevented us to create the category you wanted. Please try again.\"\n                    );\n                    props.setAlertVarient(\"danger\");\n                    props.setAlertShow(true);\n               }\n          } catch (error) {\n               props.setAlertHead(\"Unexpected Error occured!\");\n               props.setAlertBody(\n                    \"Some unknown error occured. Please check your connection and try again.\"\n               );\n               props.setAlertVarient(\"danger\");\n               props.setAlertShow(true);\n          }\n     };\n\n     return (\n          <Modal\n               {...props}\n               size=\"lg\"\n               aria-labelledby=\"contained-modal-title-vcenter\"\n               centered\n          >\n               <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\n                         New Category\n                    </Modal.Title>\n               </Modal.Header>\n               <Modal.Body>\n                    <Form.Control\n                         type=\"text\"\n                         placeholder=\"Enter category name\"\n                         value={CategoryName}\n                         onChange={updateCategoryName}\n                    />\n               </Modal.Body>\n               <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={props.onHide}>\n                         Cancel\n                    </Button>\n                    <Button variant=\"primary\" onClick={addCategory}>\n                         Create\n                    </Button>\n               </Modal.Footer>\n          </Modal>\n     );\n}\n\nexport default function CategoryPage(props) {\n     const navigate = useNavigate();\n\n     const [alertHead, setAlertHead] = useState(\"\");\n     const [alertBody, setAlertBody] = useState(\"\");\n     const [alertVarient, setAlertVarient] = useState(\"\");\n     const [Alertshow, setAlertShow] = useState(false);\n     const [modalShow, setModalShow] = React.useState(false);\n     const [HtmlLoaded, setHtmlLoaded] = useState(false);\n     const [orgName, setOrgName] = useState(\"Organization\");\n     const [CategoryComponent, setCategoryComponent] = useState(<></>);\n     const [reloader, setreloader] = useState(false);\n\n     const JumpToNewCategory = async (e) => {\n          setModalShow(true);\n     };\n\n     const openMembers = () => {\n          const dizkuzData = JSON.parse(localStorage.getItem(\"dizkuzData\"));\n          dizkuzData.currentCategory = props.id;\n          dizkuzData.currentCategoryName = props.title;\n          localStorage.removeItem(\"dizkuzData\");\n          localStorage.setItem(\"dizkuzData\", JSON.stringify(dizkuzData));\n          navigate(\"/members\");\n     };\n\n     useEffect(() => {\n          let currentUser_ = {};\n          currentUser_ = JSON.parse(localStorage.getItem(\"currentUser\"));\n          if (currentUser_ == null) {\n               navigate(\"/landing\");\n          }\n          const doWork = async () => {\n               try {\n                    const dizkuzData = JSON.parse(\n                         localStorage.getItem(\"dizkuzData\")\n                    );\n                    const currentUser_ = JSON.parse(\n                         localStorage.getItem(\"currentUser\")\n                    );\n                    const OrgID = dizkuzData.currentOrganisation;\n                    setOrgName(dizkuzData.currentOrganisationName);\n                    const inp = {\n                         email: currentUser_.email,\n                         password: currentUser_.password,\n                         ID: OrgID,\n                    };\n                    const response = await fetch(\n                         \"https://dizkuz-server.onrender.com/categories\",\n                         {\n                              method: \"POST\",\n                              body: JSON.stringify(inp),\n                              headers: {\n                                   \"Content-Type\": \"application/json\",\n                              },\n                         }\n                    );\n                    const fetchData = await response.json();\n                    if (fetchData.status === \"authFailed\") {\n                         localStorage.removeItem(\"currentUser\");\n                         navigate(\"/landing\");\n                    } else if (fetchData.status == \"failed\") {\n                         setAlertHead(\"Unknown error occured\");\n                         setAlertBody(\n                              \"Due to some unexpected error, the organisation was not loaaded. Please try again.\"\n                         );\n                         setAlertVarient(\"danger\");\n                         setAlertShow(true);\n                    } else {\n                         const LoadedData = fetchData.data;\n                         const Categories = LoadedData;\n                         let tempVar;\n                         if (Categories.length == 0) {\n                              tempVar = (\n                                   <div\n                                        style={{\n                                             paddingTop: \"100px\",\n                                             paddingBottom: \"50px\",\n                                             color: \"darkred\",\n                                        }}\n                                   >\n                                        <h4>\n                                             Sorry, No category exists in this\n                                             organisation. Try adding a new\n                                             category on your own.\n                                        </h4>\n                                   </div>\n                              );\n                         } else {\n                              tempVar = Categories.map((category) => {\n                                   return (\n                                        <div>\n                                             <CategoryCard\n                                                  title={category.name}\n                                                  id={category._id}\n                                                  key={category._id}\n                                             />\n                                        </div>\n                                   );\n                              });\n                         }\n                         const tempCategoryComponent = tempVar;\n                         setreloader(!reloader);\n                         setCategoryComponent(tempCategoryComponent);\n                         setHtmlLoaded(true);\n                    }\n               } catch (error) {\n                    setAlertHead(\"Unexpected error occured!\");\n                    setAlertBody(\n                         \"Due to some unexpected error we were not able to get the categories for you. Please check your connection and try again...\"\n                    );\n                    setAlertVarient(\"danger\");\n                    setAlertShow(true);\n               }\n          };\n          doWork();\n     }, [reloader]);\n\n     return HtmlLoaded ? (\n          Alertshow ? (\n               <>\n                    <NavBar />\n                    <Alert\n                         variant={alertVarient}\n                         onClose={() => setAlertShow(false)}\n                         dismissible\n                    >\n                         <Alert.Heading>{alertHead}</Alert.Heading>\n                         <p>{alertBody}</p>\n                    </Alert>\n                    <div className=\"CategoryConainer\">\n                         <h3 style={{ textAlign: \"center\" }}>{orgName}</h3>\n                         <hr />\n                         <div className=\"OrganisationButton2\">\n                              <Button\n                                   className=\"orgbtn_\"\n                                   variant=\"outline-primary\"\n                                   onClick={openMembers}\n                              >\n                                   Members\n                              </Button>\n                              <Button\n                                   className=\"orgbtn_\"\n                                   variant=\"primary\"\n                                   onClick={JumpToNewCategory}\n                              >\n                                   New Category\n                              </Button>\n                         </div>\n                         <div>{CategoryComponent}</div>\n                    </div>\n                    <NewCategoryModal\n                         show={modalShow}\n                         alertHead={alertHead}\n                         alertBody={alertBody}\n                         alertVarient={alertVarient}\n                         Alertshow={Alertshow}\n                         setAlertHead={setAlertHead}\n                         setAlertBody={setAlertBody}\n                         setAlertVarient={setAlertVarient}\n                         setAlertShow={setAlertShow}\n                         onHide={() => setModalShow(false)}\n                    />\n                    <Footer />\n               </>\n          ) : (\n               <>\n                    <NavBar />\n                    <div\n                         className=\"CategoryConainer\"\n                         style={{ paddingTop: \"0px\" }}\n                    >\n                         <h3 style={{ textAlign: \"center\" }}>{orgName}</h3>\n                         <hr />\n                         <div className=\"OrganisationButton2\">\n                              <Button\n                                   className=\"orgbtn_\"\n                                   variant=\"outline-primary\"\n                                   onClick={openMembers}\n                              >\n                                   Members\n                              </Button>\n                              <Button\n                                   className=\"orgbtn_\"\n                                   variant=\"primary\"\n                                   onClick={JumpToNewCategory}\n                              >\n                                   New Category\n                              </Button>\n                         </div>\n                         <div>{CategoryComponent}</div>\n                    </div>\n                    <NewCategoryModal\n                         show={modalShow}\n                         alertHead={alertHead}\n                         alertBody={alertBody}\n                         alertVarient={alertVarient}\n                         Alertshow={Alertshow}\n                         setAlertHead={setAlertHead}\n                         setAlertBody={setAlertBody}\n                         setAlertVarient={setAlertVarient}\n                         setAlertShow={setAlertShow}\n                         onHide={() => setModalShow(false)}\n                    />\n                    <Footer />\n               </>\n          )\n     ) : (\n          <>\n               <NavBar />\n               <div className=\"SpinnerContainer\">\n                    <Spinner animation=\"border\" variant=\"dark\" />\n               </div>\n               <Footer />\n          </>\n     );\n}\n","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Pages\\AboutUsPage\\AboutUsPage.js",[],[],"C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\NavBar.js",[],[],"C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\Footer.js",[],[],"C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\IssueCard.js",[],[],"C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\ImageContainer.js",[],[],"C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\OrganisationCard.js",["191","192"],[],"import React from \"react\";\nimport \"./Components.css\";\nimport Button from \"react-bootstrap/Button\";\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Modal from \"react-bootstrap/Modal\";\n\nexport default function OrganisationCard(prop) {\n     const navigate = useNavigate();\n     let currentUser_ = {};\n\n     // modal\n     const [show, setShow] = useState(false);\n\n     const handleClose = () => {\n          setShow(false);\n     };\n     const handleShow = () => {\n          setShow(true);\n     };\n     const handleLeave = async (e) => {\n          setShow(false);\n          currentUser_ = JSON.parse(localStorage.getItem(\"currentUser\"));\n          const out = {\n               name: currentUser_.name,\n               email: currentUser_.email,\n               password: currentUser_.password,\n               organisations: currentUser_.organisations,\n               userId: currentUser_._id,\n               organisationId: prop.id,\n          };\n          try {\n               const response = await fetch(\"https://dizkuz-server.onrender.com/leaveOrg\", {\n                    method: \"POST\",\n                    body: JSON.stringify(out),\n                    headers: {\n                         \"Content-Type\": \"application/json\",\n                    },\n               });\n               const newOrgs = await response.json();\n               if (newOrgs.process === \"success\") {\n                    let curUser = {\n                         name: newOrgs.user.name,\n                         email: newOrgs.user.email,\n                         password: newOrgs.user.password,\n                         organisations: newOrgs.user.organisations,\n                         messages: newOrgs.user.messages,\n                         _id: newOrgs.user._id,\n                         __v: newOrgs.user.__v,\n                    };\n                    localStorage.removeItem(\"currentUser\");\n                    localStorage.setItem(\n                         \"currentUser\",\n                         JSON.stringify(curUser)\n                    );\n                    // navigate(\"/organisations\");\n                    prop.setRerenderer(!prop.rerenderer);\n                    const redirectURL = \"/organisations\";\n                    localStorage.setItem(\n                         \"dizkuzredirectURL\",\n                         JSON.stringify(redirectURL)\n                    );\n                    navigate(\"/redirect\");\n               }\n          } catch (error) {\n               window.alert(\"Try again !\");\n               setShow(true);\n          }\n     };\n\n     const openOrganisation = () => {\n          const dizkuzData = JSON.parse(localStorage.getItem(\"dizkuzData\"));\n          dizkuzData.currentOrganisation = prop.id;\n          dizkuzData.currentOrganisationName = prop.title;\n          localStorage.removeItem(\"dizkuzData\");\n          localStorage.setItem(\"dizkuzData\", JSON.stringify(dizkuzData));\n          navigate(\"/categories\");\n     };\n     const leaveOrganisation = () => {\n          setShow(true);\n     };\n\n     return (\n          <>\n               <div className=\"OrganisationCardOuter\">\n                    <div className=\"OrganisationTitle\">\n                         {\" \"}\n                         <h5>{prop.title}</h5>{\" \"}\n                    </div>\n                    <div className=\"OrganisationButtons\">\n                         <Button\n                              className=\"orgbtn\"\n                              variant=\"outline-primary\"\n                              onClick={openOrganisation}\n                         >\n                              Open\n                         </Button>\n                         <Button\n                              className=\"orgbtn\"\n                              variant=\"outline-danger\"\n                              onClick={leaveOrganisation}\n                         >\n                              Leave\n                         </Button>\n                    </div>\n               </div>\n               <Modal show={show} onHide={handleClose}>\n                    <Modal.Header closeButton>\n                         <Modal.Title>Are you sure?</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                         Once you leave this, you won't be able to access it\n                         ever again.\n                    </Modal.Body>\n                    <Modal.Footer>\n                         <Button variant=\"secondary\" onClick={handleClose}>\n                              Cancel\n                         </Button>\n                         <Button variant=\"danger\" onClick={handleLeave}>\n                              Leave\n                         </Button>\n                    </Modal.Footer>\n               </Modal>\n          </>\n     );\n}\n","C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\MessageInput.js",[],[],"C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\CategoryCard.js",[],[],"C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\MemberCard.js",[],[],"C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\MessageCardOther.js",[],[],"C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\MessageCardUser.js",[],[],"C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\DizkuzText.js",[],[],"C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\Creaters.js",[],[],"C:\\Users\\vijay\\Desktop\\Main\\client-side\\src\\Components\\UserCard.js",["193"],[],"import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\n\nexport default function UserCard(prop) {\n     return (\n          <div className=\"UserCardMainContainer\">\n               <div className=\"UserPhoto\">\n                    <img src={prop.image} height={\"240px\"} width={\"240px\"} />\n               </div>\n               <div className=\"UserInfo\">\n                    <div>\n                         <b>{prop.name}</b>\n                         <p>{prop.branch}</p>\n                    </div>\n                    <a href={prop.gitLink}>\n                         <Button\n                              style={{ width: \"240px\" }}\n                              variant=\"outline-primary\"\n                         >\n                              Github\n                         </Button>\n                    </a>\n               </div>\n          </div>\n     );\n}\n",{"ruleId":"194","severity":1,"message":"195","line":7,"column":50,"nodeType":"196","messageId":"197","endLine":7,"endColumn":54},{"ruleId":"194","severity":1,"message":"198","line":2,"column":10,"nodeType":"196","messageId":"197","endLine":2,"endColumn":14},{"ruleId":"194","severity":1,"message":"199","line":3,"column":10,"nodeType":"196","messageId":"197","endLine":3,"endColumn":18},{"ruleId":"200","severity":1,"message":"201","line":15,"column":9,"nodeType":"202","endLine":15,"endColumn":11,"suggestions":"203"},{"ruleId":"200","severity":1,"message":"204","line":31,"column":9,"nodeType":"202","endLine":31,"endColumn":11,"suggestions":"205"},{"ruleId":"194","severity":1,"message":"206","line":14,"column":10,"nodeType":"196","messageId":"197","endLine":14,"endColumn":22},{"ruleId":"194","severity":1,"message":"207","line":22,"column":12,"nodeType":"196","messageId":"197","endLine":22,"endColumn":22},{"ruleId":"208","severity":1,"message":"209","line":44,"column":32,"nodeType":"210","messageId":"211","endLine":44,"endColumn":34},{"ruleId":"194","severity":1,"message":"212","line":51,"column":27,"nodeType":"196","messageId":"197","endLine":51,"endColumn":32},{"ruleId":"200","severity":1,"message":"201","line":91,"column":9,"nodeType":"202","endLine":91,"endColumn":11,"suggestions":"213"},{"ruleId":"214","severity":1,"message":"215","line":140,"column":31,"nodeType":"216","endLine":140,"endColumn":74},{"ruleId":"214","severity":1,"message":"215","line":185,"column":31,"nodeType":"216","endLine":185,"endColumn":74},{"ruleId":"200","severity":1,"message":"217","line":37,"column":31,"nodeType":"218","endLine":37,"endColumn":78},{"ruleId":"200","severity":1,"message":"219","line":48,"column":29,"nodeType":"220","endLine":48,"endColumn":52},{"ruleId":"200","severity":1,"message":"201","line":91,"column":9,"nodeType":"202","endLine":91,"endColumn":11,"suggestions":"221"},{"ruleId":"214","severity":1,"message":"215","line":164,"column":31,"nodeType":"216","endLine":164,"endColumn":73},{"ruleId":"214","severity":1,"message":"215","line":232,"column":31,"nodeType":"216","endLine":232,"endColumn":73},{"ruleId":"194","severity":1,"message":"222","line":4,"column":8,"nodeType":"196","messageId":"197","endLine":4,"endColumn":15},{"ruleId":"200","severity":1,"message":"217","line":24,"column":26,"nodeType":"218","endLine":24,"endColumn":73},{"ruleId":"200","severity":1,"message":"217","line":155,"column":26,"nodeType":"218","endLine":155,"endColumn":73},{"ruleId":"208","severity":1,"message":"209","line":189,"column":49,"nodeType":"210","messageId":"211","endLine":189,"endColumn":51},{"ruleId":"208","severity":1,"message":"209","line":200,"column":44,"nodeType":"210","messageId":"211","endLine":200,"endColumn":46},{"ruleId":"223","severity":1,"message":"224","line":278,"column":46,"nodeType":"216","endLine":281,"endColumn":48},{"ruleId":"223","severity":1,"message":"224","line":321,"column":46,"nodeType":"216","endLine":324,"endColumn":48},{"ruleId":"208","severity":1,"message":"209","line":39,"column":25,"nodeType":"210","messageId":"211","endLine":39,"endColumn":27},{"ruleId":"200","severity":1,"message":"217","line":148,"column":26,"nodeType":"218","endLine":148,"endColumn":73},{"ruleId":"200","severity":1,"message":"217","line":25,"column":26,"nodeType":"218","endLine":25,"endColumn":73},{"ruleId":"208","severity":1,"message":"209","line":58,"column":49,"nodeType":"210","messageId":"211","endLine":58,"endColumn":51},{"ruleId":"208","severity":1,"message":"209","line":69,"column":45,"nodeType":"210","messageId":"211","endLine":69,"endColumn":47},{"ruleId":"200","severity":1,"message":"217","line":40,"column":26,"nodeType":"218","endLine":40,"endColumn":73},{"ruleId":"208","severity":1,"message":"209","line":79,"column":49,"nodeType":"210","messageId":"211","endLine":79,"endColumn":51},{"ruleId":"208","severity":1,"message":"209","line":90,"column":46,"nodeType":"210","messageId":"211","endLine":90,"endColumn":48},{"ruleId":"208","severity":1,"message":"209","line":183,"column":49,"nodeType":"210","messageId":"211","endLine":183,"endColumn":51},{"ruleId":"208","severity":1,"message":"209","line":194,"column":48,"nodeType":"210","messageId":"211","endLine":194,"endColumn":50},{"ruleId":"200","severity":1,"message":"201","line":238,"column":9,"nodeType":"202","endLine":238,"endColumn":19,"suggestions":"225"},{"ruleId":"194","severity":1,"message":"226","line":4,"column":20,"nodeType":"196","messageId":"197","endLine":4,"endColumn":29},{"ruleId":"194","severity":1,"message":"227","line":18,"column":12,"nodeType":"196","messageId":"197","endLine":18,"endColumn":22},{"ruleId":"223","severity":1,"message":"224","line":8,"column":21,"nodeType":"216","endLine":8,"endColumn":78},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'json' is defined but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["228"],"React Hook useEffect has missing dependencies: 'currentUser.name' and 'navigate'. Either include them or remove the dependency array.",["229"],"'currentUser_' is assigned a value but never used.","'CheckLogin' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'check' is assigned a value but never used.",["230"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","Assignments to the 'currentUser_' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","Assignments to the 'profilePic' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression",["231"],"'testImg' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["232"],"'useEffect' is defined but never used.","'handleShow' is assigned a value but never used.",{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},{"desc":"233","fix":"237"},{"desc":"233","fix":"238"},{"desc":"239","fix":"240"},"Update the dependencies array to be: [navigate]",{"range":"241","text":"242"},"Update the dependencies array to be: [currentUser.name, navigate]",{"range":"243","text":"244"},{"range":"245","text":"242"},{"range":"246","text":"242"},"Update the dependencies array to be: [navigate, reloader]",{"range":"247","text":"248"},[424,426],"[navigate]",[871,873],"[currentUser.name, navigate]",[3486,3488],[3539,3541],[10310,10320],"[navigate, reloader]"]